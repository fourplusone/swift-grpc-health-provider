//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: Sources/HealthProvider/health.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Grpc_Health_V1_HealthClient, then call methods of this protocol to make API calls.
public protocol Grpc_Health_V1_HealthClientProtocol {
  func check(_ request: Grpc_Health_V1_HealthCheckRequest, callOptions: CallOptions?) -> UnaryCall<Grpc_Health_V1_HealthCheckRequest, Grpc_Health_V1_HealthCheckResponse>
  func watch(_ request: Grpc_Health_V1_HealthCheckRequest, callOptions: CallOptions?, handler: @escaping (Grpc_Health_V1_HealthCheckResponse) -> Void) -> ServerStreamingCall<Grpc_Health_V1_HealthCheckRequest, Grpc_Health_V1_HealthCheckResponse>
}

public final class Grpc_Health_V1_HealthClient: GRPCClient, Grpc_Health_V1_HealthClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the grpc.health.v1.Health service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }

  /// If the requested service is unknown, the call will fail with status
  /// NOT_FOUND.
  ///
  /// - Parameters:
  ///   - request: Request to send to Check.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func check(
    _ request: Grpc_Health_V1_HealthCheckRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Grpc_Health_V1_HealthCheckRequest, Grpc_Health_V1_HealthCheckResponse> {
    return self.makeUnaryCall(
      path: "/grpc.health.v1.Health/Check",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Performs a watch for the serving status of the requested service.
  /// The server will immediately send back a message indicating the current
  /// serving status.  It will then subsequently send a new message whenever
  /// the service's serving status changes.
  ///
  /// If the requested service is unknown when the call is received, the
  /// server will send a message setting the serving status to
  /// SERVICE_UNKNOWN but will *not* terminate the call.  If at some
  /// future point, the serving status of the service becomes known, the
  /// server will send a new message with the service's serving status.
  ///
  /// If the call terminates with status UNIMPLEMENTED, then clients
  /// should assume this method is not supported and should not retry the
  /// call.  If the call terminates with any other status (including OK),
  /// clients should retry the call with appropriate exponential backoff.
  ///
  /// - Parameters:
  ///   - request: Request to send to Watch.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func watch(
    _ request: Grpc_Health_V1_HealthCheckRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Grpc_Health_V1_HealthCheckResponse) -> Void
  ) -> ServerStreamingCall<Grpc_Health_V1_HealthCheckRequest, Grpc_Health_V1_HealthCheckResponse> {
    return self.makeServerStreamingCall(
      path: "/grpc.health.v1.Health/Watch",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Grpc_Health_V1_HealthProvider: CallHandlerProvider {
  /// If the requested service is unknown, the call will fail with status
  /// NOT_FOUND.
  func check(request: Grpc_Health_V1_HealthCheckRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpc_Health_V1_HealthCheckResponse>
  /// Performs a watch for the serving status of the requested service.
  /// The server will immediately send back a message indicating the current
  /// serving status.  It will then subsequently send a new message whenever
  /// the service's serving status changes.
  ///
  /// If the requested service is unknown when the call is received, the
  /// server will send a message setting the serving status to
  /// SERVICE_UNKNOWN but will *not* terminate the call.  If at some
  /// future point, the serving status of the service becomes known, the
  /// server will send a new message with the service's serving status.
  ///
  /// If the call terminates with status UNIMPLEMENTED, then clients
  /// should assume this method is not supported and should not retry the
  /// call.  If the call terminates with any other status (including OK),
  /// clients should retry the call with appropriate exponential backoff.
  func watch(request: Grpc_Health_V1_HealthCheckRequest, context: StreamingResponseCallContext<Grpc_Health_V1_HealthCheckResponse>) -> EventLoopFuture<GRPCStatus>
}

extension Grpc_Health_V1_HealthProvider {
  public var serviceName: String { return "grpc.health.v1.Health" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "Check":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.check(request: request, context: context)
        }
      }

    case "Watch":
      return ServerStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.watch(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}


// Provides conformance to `GRPCPayload`
extension Grpc_Health_V1_HealthCheckRequest: GRPCProtobufPayload {}
extension Grpc_Health_V1_HealthCheckResponse: GRPCProtobufPayload {}
